# Fit first model without preprocessing
modelFit <- train(Survived ~ Pclass + Sex + Age + SibSp + Parch,
data = titanicData,
method=c("rpart"))
predictions <- predict(modelFit, newdata = testing)
validTest <- complete.cases(testing)
confusionMatrix(predictions, testing[validTest, ]$Survived)
predictData <- read.csv("data/test.csv")
predictions <- predict(modelFit, newdata = testing)
# Predicting Titanic`s Death
library("caret")
# Load data from Titanic data set
titanicData <- read.csv("data/train.csv")
# Filter relevant columns
# Columns left out that may help: Ticket, Fare, Cabin, Embarked
titanicData <- titanicData[c("PassengerId","Survived","Pclass","Sex",
"Age","SibSp","Parch")]
# Convert variables to factor
titanicData$Survived <- as.factor(titanicData$Survived)
titanicData$Pclass <- as.factor(titanicData$Pclass)
# Create trainning datasets
inTrain <- createDataPartition(y = titanicData$Survived, p = 0.75, list = F)
trainning <- titanicData[inTrain,]
testing <- titanicData[-inTrain,]
# Fit first model without preprocessing
modelFit <- train(Survived ~ Pclass + Sex + Age + SibSp + Parch,
data = titanicData,
method=c("rpart"))
predictions <- predict(modelFit, newdata = testing)
validTest <- complete.cases(testing)
confusionMatrix(predictions, testing[validTest, ]$Survived)
predictData <- read.csv("data/test.csv")
complete.cases(predictData)
!complete.cases(predictData)
sum(!complete.cases(predictData))
View(predictData)
# Now, gonna prepare the real thing. Load and preprocess data
predictData <- read.csv("data/test.csv")
predictData <- predictData[c("PassengerId","Survived","Pclass","Sex",
"Age","SibSp","Parch")]
predictData$Survived <- as.factor(predictData$Survived)
predictData$Pclass <- as.factor(predictData$Pclass)
# Now, gonna prepare the real thing. Load and preprocess data
predictData <- read.csv("data/test.csv")
predictData <- predictData[c("PassengerId","Pclass","Sex",
"Age","SibSp","Parch")]
predictData$Survived <- as.factor(predictData$Survived)
predictData$Pclass <- as.factor(predictData$Pclass)
predictData <- read.csv("data/test.csv")
predictData <- predictData[c("PassengerId","Pclass","Sex",
"Age","SibSp","Parch")]
predictData$Pclass <- as.factor(predictData$Pclass)
predictData$Pclass <- as.factor(predictData$Pclass)
predictData <- read.csv("data/test.csv")
predictData <- predictData[c("PassengerId","Pclass","Sex",
"Age","SibSp","Parch")]
predictData$Pclass <- as.factor(predictData$Pclass)
complete.cases(predictData)
sum(!complete.cases(predictData))
complete.cases(predictData)
!complete.cases(predictData)
View(predictData)
predictData$Sex[is.na(predictData$Age),]
?is.na
predictData$Sex[is.na(predictData$Age)]
table(predictData$Sex[is.na(predictData$Age)])
median(titanicData$Age)
titanicData$Age
median(titanicData$Age, na.rm=TRUE)
ave(titanicData$Age, na.rm=TRUE)
mean(titanicData$Age, na.rm=TRUE)
median(titanicData$Age, na.rm=TRUE)
median(titanicData$Age[titanicData$Sex="male"], na.rm=TRUE)
median(titanicData$Age[titanicData$Sex="male",], na.rm=TRUE)
median(titanicData$Age[titanicData$Sex=="male"], na.rm=TRUE)
median(titanicData$Age[titanicData$Sex=="female"], na.rm=TRUE)
titanicData$Age[titanicData$Sex=="female"]
median(titanicData$Age[titanicData$Sex=="male"], na.rm=TRUE)
maleAge   <- median(titanicData$Age[titanicData$Sex=="male"], na.rm=TRUE)
femaleAge <- median(titanicData$Age[titanicData$Sex=="female"], na.rm=TRUE)
median(titanicData$Age[titanicData$Sex=="male"], na.rm=TRUE)
titanicData$Age
titanicData$Age[titanicData$Sex=="male"]
titanicData$Age[titanicData$Sex=="female"]
length(titanicData$Age[titanicData$Sex=="female"])
f <- length(titanicData$Age[titanicData$Sex=="female"])
m <- length(titanicData$Age[titanicData$Sex=="male"])
t <- f + m
f <- is.na(titanicData$Age[titanicData$Sex=="female"])
m <- is.na(titanicData$Age[titanicData$Sex=="male"])
t <- f + m
f <- is.na(titanicData$Age[titanicData$Sex=="female"])
m <- is.na(titanicData$Age[titanicData$Sex=="male"])
t <- f + m
f <- complete.cases(titanicData$Age[titanicData$Sex=="female"])
m <- complete.cases(titanicData$Age[titanicData$Sex=="male"])
f <- sum(!complete.cases(titanicData$Age[titanicData$Sex=="female"]))
m <- sum(!complete.cases(titanicData$Age[titanicData$Sex=="male"]))
t <- f + m
t <- f + m
t <- 177
f <- titanicData$Age[titanicData$Sex=="female" & is.na(titanicData$Sex) ]
f
t <- 177
mt <- 124
ft <- t - mt
titanicData$Age[titanicData$Sex=="female" & is.na(titanicData$Sex) ]
titanicData$Age[titanicData$Sex=="female"]
titanicData$Age[is.na(titanicData$Sex)]
titanicData$Age[is.na(titanicData$Age)]
titanicData$Age[titanicData$Sex=="female" & is.na(titanicData$Age) ]
titanicData$Age[titanicData$Sex=="female" & is.na(titanicData$Age) ] <- femaleAge
titanicData$Age[titanicData$Sex=="male" & is.na(titanicData$Age) ] <- maleAge
complete.cases(titanicData)
sum(!complete.cases(titanicData))
inTrain <- createDataPartition(y = titanicData$Survived, p = 0.75, list = F)
trainning <- titanicData[inTrain,]
testing <- titanicData[-inTrain,]
modelFit <- train(Survived ~ Pclass + Sex + Age + SibSp + Parch,
data = titanicData,
method=c("rpart"))
length(testing)
l <- length(testing$PassengerId)
predictions <- predict(modelFit, newdata = testing)
#validTest <- complete.cases(testing)
confusionMatrix(predictions, testing[validTest, ]$Survived)
predictions <- predict(modelFit, newdata = testing)
#validTest <- complete.cases(testing)
confusionMatrix(predictions, testing$Survived)
predictData <- read.csv("data/test.csv")
predictData <- predictData[c("PassengerId","Pclass","Sex",
"Age","SibSp","Parch")]
predictData$Pclass <- as.factor(predictData$Pclass)
predictData$Age[predictData$Sex=="female" & is.na(predictData$Age) ] <- femaleAge
predictData$Age[predictData$Sex=="male" & is.na(predictData$Age) ] <- maleAge
finalPred <- predict(modelFit, newdata = predictData)
length(predictData$PassengerId)
length(finalPred)
exportData <- cbind(PassengerId = predictData$PassengerId,Survived = finalPred)
View(exportData)
# Load data from Titanic data set
titanicData <- read.csv("data/train.csv")
# Filter relevant columns
# Columns left out that may help: Ticket, Fare, Cabin, Embarked
titanicData <- titanicData[c("PassengerId","Survived","Pclass","Sex",
"Age","SibSp","Parch")]
# Convert variables to factor
titanicData$Survived <- as.factor(titanicData$Survived)
titanicData$Pclass <- as.factor(titanicData$Pclass)
# Preprocess training data, imputing age data
maleAge   <- median(titanicData$Age[titanicData$Sex=="male"], na.rm=TRUE)
femaleAge <- median(titanicData$Age[titanicData$Sex=="female"], na.rm=TRUE)
titanicData$Age[titanicData$Sex=="female" & is.na(titanicData$Age) ] <- femaleAge
titanicData$Age[titanicData$Sex=="male" & is.na(titanicData$Age) ] <- maleAge
# Save a copy of the original dataset after preprocessing but before tests
originalData <- titanicData
# Create trainning datasets
inTrain <- createDataPartition(y = titanicData$Survived, p = 0.75, list = F)
trainning <- titanicData[inTrain,]
testing <- titanicData[-inTrain,]
# Fit first model
modelFit <- train(Survived ~ Pclass + Sex + Age + SibSp + Parch,
data = titanicData,
method=c("rpart"))
# Test the model
predictions <- predict(modelFit, newdata = testing)
confusionMatrix(predictions, testing$Survived)
finalFit <- train(Survived ~ Pclass + Sex + Age + SibSp + Parch,
data = originalData,
method=c("rpart"))
predictData <- read.csv("data/test.csv")
predictData <- predictData[c("PassengerId","Pclass","Sex",
"Age","SibSp","Parch")]
predictData$Pclass <- as.factor(predictData$Pclass)
predictData$Age[predictData$Sex=="female" & is.na(predictData$Age) ] <- femaleAge
predictData$Age[predictData$Sex=="male" & is.na(predictData$Age) ] <- maleAge
finalPred <- predict(modelFit, newdata = predictData)
finalPred <- predict(finalFit, newdata = predictData)
# Prepare data for exporting
exportData <- cbind(PassengerId = predictData$PassengerId,Survived = finalPred)
View(exportData)
str(exportData)
exportData <- data.frame(cbind(PassengerId = predictData$PassengerId,
Survived = finalPred))
exportData$PassengerId
exportData$Survived[exportData$Survived == 1] <- 0
exportData
exportData$Survived[exportData$Survived == 1] <- 0
exportData$Survived[exportData$Survived == 2] <- 1
write.csv
write.csv(exportData)
write.csv(exportData, file="predictions.csv")
write.csv(exportData, file="predictions.csv", row.names=F)
write.csv(exportData, file="predictions.csv", row.names=F)
write.csv(exportData, file="predictions.csv", row.names=F, quote=F)
library("caret")
# Load data from Titanic data set
titanicData <- read.csv("data/train.csv")
# Filter relevant columns
# Columns left out that may help: Ticket, Fare, Cabin, Embarked
titanicData <- titanicData[c("PassengerId","Survived","Pclass","Sex",
"Age","SibSp","Parch")]
# Convert variables to factor
titanicData$Survived <- as.factor(titanicData$Survived)
titanicData$Pclass <- as.factor(titanicData$Pclass)
# Preprocess training data, imputing age data
maleAge   <- median(titanicData$Age[titanicData$Sex=="male"], na.rm=TRUE)
femaleAge <- median(titanicData$Age[titanicData$Sex=="female"], na.rm=TRUE)
titanicData$Age[titanicData$Sex=="female" & is.na(titanicData$Age) ] <- femaleAge
titanicData$Age[titanicData$Sex=="male" & is.na(titanicData$Age) ] <- maleAge
# Save a copy of the original dataset after preprocessing but before tests
originalData <- titanicData
# Create trainning datasets
inTrain <- createDataPartition(y = titanicData$Survived, p = 0.75, list = F)
trainning <- titanicData[inTrain,]
testing <- titanicData[-inTrain,]
# Fit first model: rpart
modelFit <- train(Survived ~ Pclass + Sex + Age + SibSp + Parch,
data = titanicData,
method=c("rpart"))
# Test the model
predictions <- predict(modelFit, newdata = testing)
confusionMatrix(predictions, testing$Survived)
# Fit first model: glm
modelFit <- train(Survived ~ Pclass + Sex + Age + SibSp + Parch,
data = titanicData,
method=c("glm"))
# Test the model
predictions <- predict(modelFit, newdata = testing)
confusionMatrix(predictions, testing$Survived)
# Use the full dataset
finalFit <- train(Survived ~ Pclass + Sex + Age + SibSp + Parch,
data = originalData,
method=c("glm"))
# Load and preprocess data for the target set
predictData <- read.csv("data/test.csv")
predictData <- predictData[c("PassengerId","Pclass","Sex",
"Age","SibSp","Parch")]
predictData$Pclass <- as.factor(predictData$Pclass)
predictData$Age[predictData$Sex=="female" & is.na(predictData$Age) ] <- femaleAge
predictData$Age[predictData$Sex=="male" & is.na(predictData$Age) ] <- maleAge
# Make predictions
finalPred <- predict(finalFit, newdata = predictData)
# Prepare data for exporting
exportData <- data.frame(cbind(PassengerId = predictData$PassengerId,
Survived = finalPred))
exportData$Survived[exportData$Survived == 1] <- 0
exportData$Survived[exportData$Survived == 2] <- 1
# Save file
write.csv(exportData, file="predictions.csv", row.names=F, quote=F)
# Fit third model: ada
modelFit <- train(Survived ~ Pclass + Sex + Age + SibSp + Parch,
data = titanicData,
method=c("ada"))
warnings()
# Fit third model: ada
modelFit <- train(Survived ~ Pclass + Sex + Age + SibSp + Parch,
data = titanicData,
method=c("ada"))
# Test the model
predictions <- predict(modelFit, newdata = testing)
# Load data from Titanic data set
titanicData <- read.csv("data/train.csv")
# Filter relevant columns
# Columns left out that may help: Ticket, Fare, Cabin, Embarked
titanicData <- titanicData[c("PassengerId","Survived","Pclass","Sex",
"Age","SibSp","Parch","embarked")]
# Convert variables to factor
titanicData$Survived <- as.factor(titanicData$Survived)
titanicData$Pclass <- as.factor(titanicData$Pclass)
# Preprocess training data, imputing age data
maleAge   <- median(titanicData$Age[titanicData$Sex=="male"], na.rm=TRUE)
femaleAge <- median(titanicData$Age[titanicData$Sex=="female"], na.rm=TRUE)
titanicData$Age[titanicData$Sex=="female" & is.na(titanicData$Age) ] <- femaleAge
titanicData$Age[titanicData$Sex=="male" & is.na(titanicData$Age) ] <- maleAge
complete.cases(titanicData)
sum(!complete.cases(titanicData))
# Load data from Titanic data set
titanicData <- read.csv("data/train.csv")
# Filter relevant columns
# Columns left out that may help: Ticket, Fare, Cabin, Embarked
titanicData <- titanicData[c("PassengerId","Survived","Pclass","Sex",
"Age","SibSp","Parch","embarked")]
# Convert variables to factor
titanicData$Survived <- as.factor(titanicData$Survived)
titanicData$Pclass <- as.factor(titanicData$Pclass)
# Preprocess training data, imputing age data
maleAge   <- median(titanicData$Age[titanicData$Sex=="male"], na.rm=TRUE)
femaleAge <- median(titanicData$Age[titanicData$Sex=="female"], na.rm=TRUE)
titanicData$Age[titanicData$Sex=="female" & is.na(titanicData$Age) ] <- femaleAge
titanicData$Age[titanicData$Sex=="male" & is.na(titanicData$Age) ] <- maleAge
# Load data from Titanic data set
titanicData <- read.csv("data/train.csv")
# Filter relevant columns
# Columns left out that may help: Ticket, Fare, Cabin, Embarked
titanicData <- titanicData[c("PassengerId","Survived","Pclass","Sex",
"Age","SibSp","Parch","Embarked")]
# Convert variables to factor
titanicData$Survived <- as.factor(titanicData$Survived)
titanicData$Pclass <- as.factor(titanicData$Pclass)
# Preprocess training data, imputing age data
maleAge   <- median(titanicData$Age[titanicData$Sex=="male"], na.rm=TRUE)
femaleAge <- median(titanicData$Age[titanicData$Sex=="female"], na.rm=TRUE)
titanicData$Age[titanicData$Sex=="female" & is.na(titanicData$Age) ] <- femaleAge
titanicData$Age[titanicData$Sex=="male" & is.na(titanicData$Age) ] <- maleAge
sum(!complete.cases(titanicData))
titanicData$Embarked
table(titanicData$Embarked)
# Predicting Titanic`s Death
library("caret")
# Load data from Titanic data set
titanicData <- read.csv("data/train.csv")
# Filter relevant columns
# Columns left out that may help: Ticket, Fare, Cabin, Embarked
titanicData <- titanicData[c("PassengerId","Survived","Pclass","Sex",
"Age","SibSp","Parch","Embarked")]
# Convert variables to factor
titanicData$Survived <- as.factor(titanicData$Survived)
titanicData$Pclass <- as.factor(titanicData$Pclass)
# Preprocess training data, imputing age data
maleAge   <- median(titanicData$Age[titanicData$Sex=="male"], na.rm=TRUE)
femaleAge <- median(titanicData$Age[titanicData$Sex=="female"], na.rm=TRUE)
titanicData$Age[titanicData$Sex=="female" & is.na(titanicData$Age) ] <- femaleAge
titanicData$Age[titanicData$Sex=="male" & is.na(titanicData$Age) ] <- maleAge
#
# Save a copy of the original dataset after preprocessing but before tests
originalData <- titanicData
# Create trainning datasets
inTrain <- createDataPartition(y = titanicData$Survived, p = 0.75, list = F)
trainning <- titanicData[inTrain,]
testing <- titanicData[-inTrain,]
# Fit first model: rpart
modelFit <- train(Survived ~ Pclass + Sex + Age + SibSp + Parch + Embarked,
data = titanicData,
method=c("rpart"))
predictions <- predict(modelFit, newdata = testing)
confusionMatrix(predictions, testing$Survived)
inTrain <- createDataPartition(y = titanicData$Survived, p = 0.8, list = F)
trainning <- titanicData[inTrain,]
testing <- titanicData[-inTrain,]
# Fit first model: rpart
modelFit <- train(Survived ~ Pclass + Sex + Age + SibSp + Parch + Embarked,
data = titanicData,
method=c("rpart"))
# Test the model
predictions <- predict(modelFit, newdata = testing)
confusionMatrix(predictions, testing$Survived)
# Fit second model: glm
modelFit <- train(Survived ~ Pclass + Sex + Age + SibSp + Parch + Embarked,
data = titanicData,
method=c("glm"))
# Test the model
predictions <- predict(modelFit, newdata = testing)
confusionMatrix(predictions, testing$Survived)
finalFit <- train(Survived ~ Pclass + Sex + Age + SibSp + Parch + Embarked,
data = originalData,
method=c("rpart"))
# Load and preprocess data for the target set
predictData <- read.csv("data/test.csv")
predictData <- predictData[c("PassengerId","Pclass","Sex",
"Age","SibSp","Parch","Embarked")]
predictData$Pclass <- as.factor(predictData$Pclass)
predictData$Age[predictData$Sex=="female" & is.na(predictData$Age) ] <- femaleAge
predictData$Age[predictData$Sex=="male" & is.na(predictData$Age) ] <- maleAge
# Make predictions
finalPred <- predict(finalFit, newdata = predictData)
# Prepare data for exporting
exportData <- data.frame(cbind(PassengerId = predictData$PassengerId,
Survived = finalPred))
exportData$Survived[exportData$Survived == 1] <- 0
exportData$Survived[exportData$Survived == 2] <- 1
# Save file
write.csv(exportData, file="predictions.csv", row.names=F, quote=F)
# Load data from Titanic data set
titanicData <- read.csv("data/train.csv")
titanicData$Fare
is.na(titanicData$Fare)
sum(is.na(titanicData$Fare))
# Predicting Titanic`s Death
library("caret")
# Seed: important for really comparing models
set.seed(666)
# Load data from Titanic data set
titanicData <- read.csv("data/train.csv")
# Filter relevant columns
# Columns left out that may help: Ticket, Fare, Cabin, Embarked
titanicData <- titanicData[c("PassengerId","Survived","Pclass","Sex",
"Age","SibSp","Parch","Embarked","Fare")]
# Convert variables to factor
titanicData$Survived <- as.factor(titanicData$Survived)
titanicData$Pclass <- as.factor(titanicData$Pclass)
# Preprocess training data, imputing age data
maleAge   <- median(titanicData$Age[titanicData$Sex=="male"], na.rm=TRUE)
femaleAge <- median(titanicData$Age[titanicData$Sex=="female"], na.rm=TRUE)
titanicData$Age[titanicData$Sex=="female" & is.na(titanicData$Age) ] <- femaleAge
titanicData$Age[titanicData$Sex=="male" & is.na(titanicData$Age) ] <- maleAge
# Save a copy of the original dataset after preprocessing but before tests
originalData <- titanicData
# Create trainning datasets
inTrain <- createDataPartition(y = titanicData$Survived, p = 0.8, list = F)
trainning <- titanicData[inTrain,]
testing <- titanicData[-inTrain,]
# Fit first model: rpart
modelFit <- train(Survived ~ Pclass + Sex + Age + SibSp + Parch + Embarked + Fare,
data = titanicData,
method=c("rpart"))
# Test the model
predictions <- predict(modelFit, newdata = testing)
confusionMatrix(predictions, testing$Survived)
# Fit first model: rpart
modelFit <- train(Survived ~ Pclass + Sex + Age + SibSp + Parch + Embarked,
data = titanicData,
method=c("rpart"))
# Test the model
predictions <- predict(modelFit, newdata = testing)
confusionMatrix(predictions, testing$Survived)
# Predicting Titanic`s Death
library("caret")
# Seed: important for really comparing models
set.seed(666)
# Load data from Titanic data set
titanicData <- read.csv("data/train.csv")
# Filter relevant columns
# Columns left out that may help: Ticket, Fare, Cabin, Embarked
titanicData <- titanicData[c("PassengerId","Survived","Pclass","Sex",
"Age","SibSp","Parch","Embarked","Fare")]
# Convert variables to factor
titanicData$Survived <- as.factor(titanicData$Survived)
titanicData$Pclass <- as.factor(titanicData$Pclass)
# Preprocess training data, imputing age data
maleAge   <- median(titanicData$Age[titanicData$Sex=="male"], na.rm=TRUE)
femaleAge <- median(titanicData$Age[titanicData$Sex=="female"], na.rm=TRUE)
titanicData$Age[titanicData$Sex=="female" & is.na(titanicData$Age) ] <- femaleAge
titanicData$Age[titanicData$Sex=="male" & is.na(titanicData$Age) ] <- maleAge
# Save a copy of the original dataset after preprocessing but before tests
originalData <- titanicData
# Create trainning datasets
inTrain <- createDataPartition(y = titanicData$Survived, p = 0.8, list = F)
trainning <- titanicData[inTrain,]
testing <- titanicData[-inTrain,]
# Fit first model: rpart
modelFit <- train(Survived ~ Pclass + Sex + Age + SibSp + Parch + Embarked,
data = titanicData,
method=c("rpart"))
# Test the model
predictions <- predict(modelFit, newdata = testing)
confusionMatrix(predictions, testing$Survived)
# Predicting Titanic`s Death
library("caret")
# Seed: important for really comparing models
set.seed(666)
# Load data from Titanic data set
titanicData <- read.csv("data/train.csv")
# Filter relevant columns
# Columns left out that may help: Ticket, Fare, Cabin, Embarked
titanicData <- titanicData[c("PassengerId","Survived","Pclass","Sex",
"Age","SibSp","Parch","Embarked","Fare")]
# Convert variables to factor
titanicData$Survived <- as.factor(titanicData$Survived)
titanicData$Pclass <- as.factor(titanicData$Pclass)
# Preprocess training data, imputing age data
maleAge   <- median(titanicData$Age[titanicData$Sex=="male"], na.rm=TRUE)
femaleAge <- median(titanicData$Age[titanicData$Sex=="female"], na.rm=TRUE)
titanicData$Age[titanicData$Sex=="female" & is.na(titanicData$Age) ] <- femaleAge
titanicData$Age[titanicData$Sex=="male" & is.na(titanicData$Age) ] <- maleAge
# Save a copy of the original dataset after preprocessing but before tests
originalData <- titanicData
# Create trainning datasets
inTrain <- createDataPartition(y = titanicData$Survived, p = 0.8, list = F)
trainning <- titanicData[inTrain,]
testing <- titanicData[-inTrain,]
# Fit first model: rpart
modelFit <- train(Survived ~ Pclass + Sex + Age + SibSp + Parch + Embarked,
data = titanicData,
method=c("rpart"))
# Test the model
predictions <- predict(modelFit, newdata = testing)
confusionMatrix(predictions, testing$Survived)
modelFit <- train(Survived ~ Pclass + Sex + Age + SibSp + Parch + Embarked
data = titanicData,
method=c("glm"))
# Test the model
predictions <- predict(modelFit, newdata = testing)
confusionMatrix(predictions, testing$Survived)
# Fit second model: glm
modelFit <- train(Survived ~ Pclass + Sex + Age + SibSp + Parch + Embarked,
data = titanicData,
method=c("glm"))
# Test the model
predictions <- predict(modelFit, newdata = testing)
confusionMatrix(predictions, testing$Survived)
# Now, gonna run the real thing.
# Use the full dataset
finalFit <- train(Survived ~ Pclass + Sex + Age + SibSp + Parch + Embarked,
data = originalData,
method=c("rpart"))
# Load and preprocess data for the target set
predictData <- read.csv("data/test.csv")
predictData <- predictData[c("PassengerId","Pclass","Sex",
"Age","SibSp","Parch","Embarked","Fare")]
predictData$Pclass <- as.factor(predictData$Pclass)
predictData$Age[predictData$Sex=="female" & is.na(predictData$Age) ] <- femaleAge
predictData$Age[predictData$Sex=="male" & is.na(predictData$Age) ] <- maleAge
# Make predictions
finalPred <- predict(finalFit, newdata = predictData)
# Prepare data for exporting
exportData <- data.frame(cbind(PassengerId = predictData$PassengerId,
Survived = finalPred))
exportData$Survived[exportData$Survived == 1] <- 0
exportData$Survived[exportData$Survived == 2] <- 1
# Save file
write.csv(exportData, file="predictions.csv", row.names=F, quote=F)
